generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id      Int      @id @default(autoincrement())
  name          String?
  username      String?         @unique
  email         String         @unique
  hashedPassword String?
  emailVerified DateTime?
  image         String?
  bio           String?
  Session       Session[]
  Account       Account?
  totalTokens   Int @default(35) // u need 33 to try all services
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id      Int      @id @default(autoincrement())
  userId                   Int  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}
 
 model Session {
  id      Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}

model VerificationToken {
  id      Int      @id @default(autoincrement())
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

// track token usage 
model TokenLimit {
  id      Int      @id @default(autoincrement())
  count   Int   @default(35)
  userId Int @unique 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model History {
  id           Int   @id @default(autoincrement())
  userId      Int  // @map("user_id")
  content  String 
  createdAt DateTime @default(now())
  @@index([userId])
}

// :TODO:: handle stripe modals 

model UserSubscription{
  id           String   @id @default(cuid())
  userId      Int  @unique
  stripeCustomerId String @unique
  stripeSubscriptionId String @unique
  stripePriceId String  
  stripeEndDate DateTime? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}